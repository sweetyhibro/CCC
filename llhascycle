#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Define the structure of a node in the linked list
typedef struct Node {
    int data;
    struct Node *next;
} Node;

// Function to create a new node
Node *createNode(int data) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    if (newNode != NULL) {
        newNode->data = data;
        newNode->next = NULL;
    }
    return newNode;
}

// Function to insert a new node at the end of the linked list
Node *insertAtEnd(Node *head, int data) {
    Node *newNode = createNode(data);
    if (newNode == NULL) {
        fprintf(stderr, "Memory allocation failed.\n");
        return head;
    }

    if (head == NULL) {
        // If the list is empty, make the new node the head
        head = newNode;
    } else {
        // Traverse to the end of the list
        Node *current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        // Insert the new node at the end
        current->next = newNode;
    }

    return head;
}

// Function to detect a cycle in the linked list using hash table
bool hasCycle(Node *head) {
    Node *current = head;
    Node *visited[10000] = { NULL }; // Assuming a limit of 10000 nodes (adjust as needed)

    while (current != NULL) {
        if (visited[current->data])
            return true; // Cycle detected

        visited[current->data] = current;
        current = current->next;
    }

    return false; // No cycle found
}

// Function to free memory allocated for the linked list
void freeList(Node *head) {
    Node *temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

// Function to print the linked list
void printList(Node *head) {
    Node *temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Main function to allow user input and check for cycle
int main() {
    Node *head = NULL;
    int data;
    char choice;

    do {
        printf("Enter data for the next node: ");
        scanf("%d", &data);
        head = insertAtEnd(head, data);

        printf("Do you want to add another node? (y/n): ");
        scanf(" %c", &choice);
    } while (choice == 'y' || choice == 'Y');

    printf("Linked List: ");
    printList(head);

    // Check if the linked list has a cycle
    if (hasCycle(head))
        printf("Linked list has a cycle.\n");
    else
        printf("Linked list does not have a cycle.\n");

    // Free memory allocated for the linked list
    freeList(head);

    return 0;
}
