#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Node structure definition
struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

// Function to create a new binary tree node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to create a binary tree from user input recursively
struct Node* create_binary_tree() {
    int data;
    struct Node* root = NULL;
    
    printf("Enter node value (or -1 to stop): ");
    scanf("%d", &data);
    
    if (data == -1) {
        return NULL;
    }
    
    root = createNode(data);
    
    printf("Enter left child of %d (or -1 if none): ", data);
    root->left = create_binary_tree();
    
    printf("Enter right child of %d (or -1 if none): ", data);
    root->right = create_binary_tree();
    
    return root;
}

// Function to calculate the height of a binary tree
int calculateHeight(struct Node *root) {
    if (root == NULL) {
        return -1;  // If the tree is empty, height is -1
    }
    
    int leftHeight = calculateHeight(root->left);
    int rightHeight = calculateHeight(root->right);
    
    return 1 + ((leftHeight > rightHeight) ? leftHeight : rightHeight);
}

int main() {
    struct Node *root = create_binary_tree(); // Create a binary tree based on user input
    
    if (root == NULL) {
        printf("Binary tree is empty.\n");
    } else {
        int height = calculateHeight(root);
        printf("Height of the binary tree: %d\n", height);
    }
    
    return 0;
}
