#include <stdio.h>
int top = -1, st[20], n = 20;
int isFull() {
    return top == (n - 1);
}

int isEmpty() {
    return top == -1;
}

int peek() {
    if (!isEmpty()) {
        return st[top];
    } else {
        printf("Stack is empty\n");
        return -1; 
    }
}
void push(int x) {
    if (!isFull()) {
        st[++top] = x;
    } else {
        printf("Stack overflow\n");
    }
}
int pop() {
    if (!isEmpty()) {
        int bkp = st[top];
        top--;
        return bkp;
    } else {
        printf("Stack underflow\n");
        return -1; 
    }
}
int size() {
    return top + 1;
}
void display() {
    if (isEmpty()) {
        printf("Stack is empty\n");
    } else {
        printf("Stack elements: ");
        for (int i = 0; i <= top; i++) {
            printf("%d ", st[i]);
        }
        printf("\n");
    }
}
int main() {
    int choice, value;

    while (1) {
        printf("\nStack Operations Menu:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Check if Empty\n");
        printf("5. Check if Full\n");
        printf("6. Display Size\n");
        printf("7. Display All Elements\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to push: ");
                scanf("%d", &value);
                push(value);
                break;
            case 2:
                value = pop();
                if (value != -1) {
                    printf("Popped element: %d\n", value);
                }
                break;
            case 3:
                value = peek();
                if (value != -1) {
                    printf("Top element: %d\n", value);
                }
                break;
            case 4:
                if (isEmpty()) {
                    printf("Stack is empty\n");
                } else {
                    printf("Stack is not empty\n");
                }
                break;
            case 5:
                if (isFull()) {
                    printf("Stack is full\n");
                } else {
                    printf("Stack is not full\n");
                }
                break;
            case 6:
                printf("Stack size: %d\n", size());
                break;
            case 7:
                display();
                break;
            case 8:
                return 0;
            default:
                printf("Invalid choice, please try again.\n");
        }
    }

    return 0;
}
