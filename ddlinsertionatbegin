#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node in the doubly linked list
typedef struct Node {
    int data;
    struct Node *prev;
    struct Node *next;
} Node;
Node *insertatbegin(Node *head, int v) {
    // Allocate memory for the new node
    Node *nn = (Node *)malloc(sizeof(Node));
    if (nn == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        return head;  // Return the original head unchanged
    }

    // Initialize the new node
    nn->data = v;
    nn->next = NULL;
    nn->prev = NULL;

    // Set nn->next to point to the current head of the list
    nn->next = head;

    // If head is not NULL, set head->prev to point to nn
    if (head) {
        head->prev = nn;
    }

    // Return nn as the new head of the list
    return nn;
}
int main() {
    Node *head = NULL;
    int value;
    char choice;

    do {
        // Prompt user for input
        printf("Enter a value to insert at the beginning of the list: ");
        scanf("%d", &value);

        // Insert the value at the beginning of the list
        head = insertatbegin(head, value);

        // Ask user if they want to continue
        printf("Do you want to insert another value? (y/n): ");
        scanf(" %c", &choice);
    } while (choice == 'y' || choice == 'Y');

    // Print the doubly linked list
    Node *temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");

    // Free memory allocated for the doubly linked list
    Node *current = head;
    Node *next;
    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }

    return 0;
}
